package code.model;

import java.awt.Point;
import java.util.*;

public class Board {
	private ArrayList<ArrayList<String>> _board;
	private ArrayList<String> _colorFileNames;
	private Random _rand;
	private int _tot;

	private static int MAX_COLORS = 6; // max possible is 6

	public Board(int rows, int cols) {
		_tot = 0;
		do {
			_board = new ArrayList<ArrayList<String>>();
			_rand = new Random();
			_colorFileNames = new ArrayList<String>();
			for (int i = 0; i < MAX_COLORS; i = i + 1) {
				_colorFileNames.add("Images/Tile-" + i + ".png");
			}
			for (int r = 0; r < rows; r = r + 1) {
				ArrayList<String> row = new ArrayList<String>();
				for (int c = 0; c < cols; c = c + 1) {
					row.add(_colorFileNames.get(_rand.nextInt(_colorFileNames.size())));
				}
				_board.add(row);
			}
		} while (matchCheck() == true && legalMove(_board) == true);
	}

	public int rows() {
		return _board.size();
	}

	public int cols() {
		return _board.get(0).size();
	}

	public String get(Point p) {
		return _board.get(p.x).get(p.y);
	}

	private String set(Point p, String s) {
		return _board.get(p.x).set(p.y, s);
	}

	public void exchange(Point p, Point q) {
		String temp = get(p);
		set(p, get(q));
		set(q, temp);
		if (match().size() > 0) {
			_board.remove(p);
			_board.remove(temp);
		}
	}

	public void exchangeExtension() {
		if (match().size() > 0) {
			while (matchCheck() == true) {
				score();
				removeTiles();
			}
		}
	}

	public void score() {
		int x;
		x = 3 + ((partition(_board).size() - 1) - 3) * ((partition(_board).size() - 1) - 3);
		System.out.println(_tot = _tot + x);
	}

	public boolean matchCheck() {
		if (match().size() > 0)
			return true;
		else
			return false;
	}

	public LinkedHashSet<Point> match() {
		return match(3);
	}

	public void removeTiles() {
		for (Point p : match()) {
			Point p1 = new Point(p.x, p.y);
			Point p2 = new Point();
			set(p, null);
			while (p1.x != 0) {
				p2.setLocation(p1.x - 1, p1.y);
				String temp = get(p1);
				set(p1, get(p2));
				set(p2, temp);
				p1 = new Point(p1.x - 1, p1.y);
			}
			set(p1, _colorFileNames.get(_rand.nextInt(_colorFileNames.size())));
		}
	}
	public void dropDown(Point p) {
		set(p, _colorFileNames.get(_rand.nextInt(_colorFileNames.size())));
	}

	public LinkedHashSet<Point> match(int runLength) {
		LinkedHashSet<Point> matches = verticalMatch(runLength);
		matches.addAll(horizontalMatch(runLength));
		return matches;
	}
	
	private boolean legalMove(ArrayList<ArrayList<String>> board) {
		for(int r = 0; r < 5; r++){
			for(int col = 0; col < 5; col++){
				Point a = new Point(r - 1, col);
				Point b = new Point(r + 1, col);
				Point c = new Point(r, col - 1);
				Point d = new Point(r, col + 1);
				Point e = new Point(r + 1, col + 1);
				Point f = new Point(r - 1, col + 1);
				Point g = new Point(r +1, col -1);
				Point h = new Point(r - 1, col -1);
				Point i = new Point(r + 2, col);
				Point j = new Point(r, col + 2);
				Point k = new Point(r - 2, col);
				Point l = new Point(r, col - 2);
				
				if(inBounds(a, board) && inBounds (b, board) && inBounds(c, board) && matches(a, b, board) && matches(a, c, board)){ return true; }
				if(inBounds(a, board) && inBounds (b, board) && inBounds(d, board) && matches(a, b, board) && matches(a, d, board)){ return true; }
				if(inBounds(c, board) && inBounds (b, board) && inBounds(d, board) && matches(c, b, board) && matches(c, d, board)){ return true; }
				if(inBounds(c, board) && inBounds (a, board) && inBounds(d, board) && matches(c, a, board) && matches(c, d, board)){ return true; }
				if(inBounds(a, board) && inBounds (c, board) && inBounds(g, board) && matches(a, c, board) && matches(a, g, board)){ return true; }
				if(inBounds(a, board) && inBounds (d, board) && inBounds(e, board) && matches(a, d, board) && matches(a, e, board)){ return true; }
				if(inBounds(c, board) && inBounds (a, board) && inBounds(f, board) && matches(c, a, board) && matches(c, f, board)){ return true; }
				if(inBounds(c, board) && inBounds (b, board) && inBounds(e, board) && matches(c, b, board) && matches(c, e, board)){ return true; }
				if(inBounds(b, board) && inBounds (d, board) && inBounds(f, board) && matches(b, d, board) && matches(b, f, board)){ return true; }
				if(inBounds(b, board) && inBounds (c, board) && inBounds(h, board) && matches(b, c, board) && matches(b, h, board)){ return true; }
				if(inBounds(d, board) && inBounds (a, board) && inBounds(h, board) && matches(d, a, board) && matches(d, h, board)){ return true; }
				if(inBounds(d, board) && inBounds (b, board) && inBounds(g, board) && matches(d, b, board) && matches(d, g, board)){ return true; }
				if(inBounds(a, board) && inBounds (b, board) && inBounds(i, board) && matches(a, b, board) && matches(a, i, board)){ return true; }
				if(inBounds(a, board) && inBounds (k, board) && inBounds(b, board) && matches(a, k, board) && matches(a, b, board)){ return true; }
				if(inBounds(j, board) && inBounds (d, board) && inBounds(c, board) && matches(j, d, board) && matches(j, c, board)){ return true; }
				if(inBounds(d, board) && inBounds (c, board) && inBounds(l, board) && matches(d, c, board) && matches(l, d, board)){ return true; }
			}
		}
		return false;
	}

	/**
	 * Finding matches
	 */

	private LinkedHashSet<Point> horizontalMatch(int runLength) {
		LinkedHashSet<Point> matches = new LinkedHashSet<Point>();
		int minCol = 0;
		int maxCol = cols() - runLength;
		for (int r = 0; r < rows(); r = r + 1) {
			for (int c = minCol; c <= maxCol; c = c + 1) { // The cols we can
															// START checking in
				HashSet<String> values = new HashSet<String>();
				HashSet<Point> points = new HashSet<Point>();
				for (int offset = 0; offset < runLength; offset = offset + 1) {
					Point p = new Point(r, c + offset);
					points.add(p);
					String s = get(p);
					values.add(s);
				}
				if (values.size() == 1) {
					matches.addAll(points);
				}
			}
		}
		return matches;
	}

	private LinkedHashSet<Point> verticalMatch(int runLength) {
		LinkedHashSet<Point> matches = new LinkedHashSet<Point>();
		int minRow = 0;
		int maxRow = rows() - runLength;
		for (int c = 0; c < cols(); c = c + 1) {
			for (int r = minRow; r <= maxRow; r = r + 1) { // The rows we can
															// START checking in
				HashSet<String> values = new HashSet<String>();
				HashSet<Point> points = new HashSet<Point>();
				for (int offset = 0; offset < runLength; offset = offset + 1) {
					Point p = new Point(r + offset, c);
					points.add(p);
					String s = get(p);
					values.add(s);
				}
				if (values.size() == 1) {
					matches.addAll(points);
				}
			}
		}
		return matches;
	}
	
	public boolean getLegalMove(){
		if(legalMove(_board) == true){
			return true;
		}
		return false;
	}
	

	/**
	 * Finding the valid tiles
	 */

	private HashSet<Point> trimmedRegion(HashSet<Point> in) {
		HashSet<Point> out = new HashSet<Point>();
		for (Point p : in) {
			if (inRow(p, in) || inCol(p, in)) {
				out.add(p);
			}
		}
		return out;
	}

	private boolean inCol(Point p, HashSet<Point> in) {
		return (in.contains(new Point(p.x, p.y - 2)) && in.contains(new Point(p.x, p.y - 1)))
				|| (in.contains(new Point(p.x, p.y - 1)) && in.contains(new Point(p.x, p.y + 1)))
				|| (in.contains(new Point(p.x, p.y + 1)) && in.contains(new Point(p.x, p.y + 2)));
	}

	private boolean inRow(Point p, HashSet<Point> in) {
		return (in.contains(new Point(p.x - 2, p.y)) && in.contains(new Point(p.x - 1, p.y)))
				|| (in.contains(new Point(p.x - 1, p.y)) && in.contains(new Point(p.x + 1, p.y)))
				|| (in.contains(new Point(p.x + 1, p.y)) && in.contains(new Point(p.x + 2, p.y)));
	}

	/**
	 * Finding the maximum adjacent tiles in the whole board
	 */

	public HashSet<HashSet<Point>> partition(ArrayList<ArrayList<String>> board) {
		HashSet<HashSet<Point>> partition = new HashSet<HashSet<Point>>();
		if (board != null) {
			ArrayList<Point> pointsToCheck = allPoints(board);
			while (!pointsToCheck.isEmpty()) {
				Point p = pointsToCheck.get(0);
				HashSet<Point> region = maximalAdjacentRegion(p, board);
				pointsToCheck.removeAll(region);
				partition.add(trimmedRegion(region));
			}
		}
		return partition;
	}

	private ArrayList<Point> allPoints(ArrayList<ArrayList<String>> board) {
		ArrayList<Point> listOfPoints = new ArrayList<Point>();
		for (int row = 0; row < board.size(); row++) {
			for (int col = 0; col < board.size(); col++) {
				listOfPoints.add(new Point(row, col));
			}
		}
		return listOfPoints;
	}

	/**
	 * Finding the maximum adjacent tiles
	 */

	private HashSet<Point> maximalAdjacentRegion(Point start, ArrayList<ArrayList<String>> board) {
		HashSet<Point> matchedRegion = new HashSet<Point>();
		HashSet<Point> candidatesForInclusion = new HashSet<Point>();
		HashSet<Point> adjacentMatches = new HashSet<Point>();

		candidatesForInclusion.add(start);

		while (!candidatesForInclusion.isEmpty()) {
			for (Point p : candidatesForInclusion) {
				for (Point q : adjacentAndMatching(p, board)) {
					if (!matchedRegion.contains(q) && !candidatesForInclusion.contains(q)) {
						adjacentMatches.add(q);
					}
				}
			}
			matchedRegion.addAll(candidatesForInclusion);
			HashSet<Point> temp = candidatesForInclusion;
			candidatesForInclusion = adjacentMatches;
			adjacentMatches = temp;
			adjacentMatches.clear();
		}
		return matchedRegion;
	}

	public HashSet<Point> answer(Point p, ArrayList<ArrayList<String>> board) {
		return adjacentAndMatching(p, board);
	}

	private HashSet<Point> adjacentAndMatching(Point p, ArrayList<ArrayList<String>> board) {
		HashSet<Point> result = new HashSet<Point>();
		if (p != null) {
			Point check;
			check = new Point(p.x - 1, p.y);
			if (inBounds(check, board) && matches(p, check, board)) {
				result.add(check);
			}
			check = new Point(p.x + 1, p.y);
			if (inBounds(check, board) && matches(p, check, board)) {
				result.add(check);
			}
			check = new Point(p.x, p.y - 1);
			if (inBounds(check, board) && matches(p, check, board)) {
				result.add(check);
			}
			check = new Point(p.x, p.y + 1);
			if (inBounds(check, board) && matches(p, check, board)) {
				result.add(check);
			}
		}
		return result;
	}

	private boolean matches(Point p, Point q, ArrayList<ArrayList<String>> _board) {
		return _board.get(p.x).get(p.y).equals(_board.get(q.x).get(q.y));
	}

	private boolean inBounds(Point p, ArrayList<ArrayList<String>> _board) {
		return p.x >= 0 && p.x < _board.size() && p.y >= 0 && p.y < _board.get(0).size();
	}
}
